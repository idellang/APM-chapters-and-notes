scale = T,
##use bayes method to compute for probabilities
probMethod = 'Bayes',
##specify number of components
ncomp = 4)
plsda_model
plsda_model$coefficients
plsda_model$loadings
plsda_model$probModel
plsda_model = plsda(x = training[pre2008, predictorsNoNZV], y = training[pre2008,'Class'],
## data should be on same scale for PLS. scale option applies this preprocess step
scale = T,
##use bayes method to compute for probabilities
probMethod = 'Bayes',
##specify number of components
ncomp = 4)
pls_pred = predict(plsda_model, newdata = training[-pre2008, predictorsNoNZV])
pls_pred
pls_pred = predict(plsda_model, newdata = training[-pre2008, predictorsNoNZV])
pls_pred = predict(plsda_model, newdata = training[-pre2008, predictorsNoNZV], type = 'prob')
pls_pred = predict(plsda_model, newdata = training[-pre2008,], type = 'prob')
pls_pred = predict(plsda_model, newdata = training[-pre2008, predictors], type = 'prob')
pls_pred = predict(plsda_model, newdata = training[-pre2008, predictorsNoNZV], type = 'prob')
?train
set.seed(476)
pls_fit2 = train(x = training[,predictorsNoNZV], y = training$Class,
method = 'pls', tuneGrid = expand.grid(.ncomp = 1:10),
preProcess = c('center','scale'),
metric = 'ROC',
trControl = ctrl)
pls_fit2
pls_test_probs = predict(pls_fit2, newdata = testing[,predictorsNoNZV], type = 'prob')
pls_test_classes = predict(pls_fit2, newdata = testing[,predictorsNoNZV])
pls_test_probs = predict(pls_fit2, newdata = testing[,predictorsNoNZV], type = 'prob')
head(pls_test_probs)
pls_imp_grant = varImp(pls_fit2, scale = F)
plot(pls_imp_grant, top = 20)
plot(pls_imp_grant, top = 20, scales = list(y = list(cex = .9)))
library(glmnet)
glmnet_model = glmnet(x = as.matrix(training[,predictors]), y = training$Class, family = 'binomial')
glmnet_model$lambda
glmnet_model
x
predict(glmnet_model, newx = as.matrix(training[1:5, predictors]))
predict(glmnet_model, newx = as.matrix(training[1:5, predictors]), s = c(0.05, .1, 2), type = 'class')
predict(glmnet_model, newx = as.matrix(training[1:5, predictors]),
s = c(.05, .1, .2), type = 'nonzero')
glmnet_grid = expand.grid(.alpha = c(0, .1, .2, .4, .6, .8, 1),
.lambda = seq(.01, 2, length = 20))
glmnet_grid
glmnet_grid = expand.grid(.alpha = c(0, .1, .2, .4, .6, .8, 1),
.lambda = seq(.01, 2, length = 20))
set.seed(476)
glm_tune = train(training[, predictors], y = training$Class, method = 'glmnet',
tuneGrid = glmnet_grid, preProcess = c('center','scale'),
metric = 'ROC', trControl = ctrl)
glm_tune
plot(glm_tune, plottype ='level')
plot(glm_tune, plotType ='level')
library(sparseLDA)
install.packages('sparseLDA')
library(sparseLDA)
sparse_lda_model = sda(x = as.matrix(training[,predictors]), y = training$Class,
lambda = 0.01, stop  = -6)
sparse_lda_model
#switch dimensions using t to transpose data
# also converts dataframe to matrix
input_data = list(x = t(training[,predictors]), y = training$Class)
input_data
install.packages('pamr')
#the basic syntax is
library(pamr)
nsc_model = pamr.train(data = input_data)
nsc_model
nsc_model = pamr.train(data = input_data)
example_data = t(training[1:5, predictors])
pamr.predict(nsc_model, newx = example_data, threshold = 5)
thresh17_vars = pamr.predict(nsc_model, newx = example_data, threshold = 17, type = 'nonzero')
predictors[thresh17_vars]
nsc_grid = data.frame(.threshold = 0:25)
nsc_grid = data.frame(.threshold = 0:25)
set.seed(476)
nsc_tune = train(x = training[,predictors], y = training$Class,
method = 'pam', preProcess = c('center','scale'), tuneGrid = nsc_grid,
metric = 'ROC', trControl = ctrl)
nsc_grid = data.frame(.threshold = 0:25)
set.seed(476)
nsc_tune = train(x = training[,predictors], y = training$Class,
method = 'pam', preProcess = c('center','scale'), tuneGrid = nsc_grid,
metric = 'ROC', trControl = ctrl)
nsc_tune
predictors(nsc_tune)
varImp(nsc_tune, scale = F)
varImp(nsc_tune, scale = F) %>%
arrange(desc(Importance))
varImp(nsc_tune, scale = F)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
data(hepatic)
library(AppliedPredictiveModeling)
data(hepatic)
bio
chem
injury
bio
table(injury)
library(forcats)
?fct_lump
?fct_collapse
fct_collapse(injury, 'Yes' = c('Mild','Severe'), No = 'None')
library(forcats)
fct_collapse(injury, 'Yes' = c('Mild','Severe'), No = 'None')
any_damage = fct_collapse(injury, 'Yes' = c('Mild','Severe'), No = 'None')
table(any_damage)
any_damage = as.character( injury )
any_damage[ any_damage=="Mild" ] = "Yes"
any_damage[ any_damage=="Severe" ] = "Yes"
any_damage[ any_damage=="None" ] = "No"
table( any_damage
table( any_damage )
table(any_damage)
k = createDataPartition(any_damage, p = 8, list = F, times = 1)
t = createDataPartition( any_damage, p=0.8, list=FALSE, times=1 )
k = createDataPartition(any_damage, p = .8, list = F, times = 1)
table(any_damage)/ sum(table(any_damage))
table(any_damage[t])/ sum(table(any_damage[t]))
k = createDataPartition( any_damage, p=0.8, list=FALSE, times=10 )
any_damage[k[,1]]
k
table(any_damage[k[,1]])/ sum(table(any_damage[k[,1]]))
zv_cols = nearZeroVar(bio)
zv_cols
X = bio[,-zv_cols]
str(x)
str(X)
#find linearly dependent columns
findLinearCombos(X)
ctrl = trainControl(summaryFunction = twoClassSummary, classProbs = T)
ctrl = trainControl(summaryFunction = twoClassSummary, classProbs = T)
set.seed(100)
glm_model = train(X, any_damage, method = 'glm', metric = 'ROC', trControl = ctrl)
glm_model
ctrl = trainControl(summaryFunction = twoClassSummary, classProbs = T)
set.seed(100)
glm_model = train(X, any_damage, method = 'glm', metric = 'ROC', trControl = ctrl)
glm_preds = predict(glm_model, X, type = 'prob')
glm_preds
pROC::roc(response = any_damage, predictor = glm_preds[,1])
glm_roc_curve = pROC::roc(response = any_damage, predictor = glm_preds[,1])
glm_roc_curve[1]
glm_roc_curve$auc[1]
glm_roc_curve$auc
glm_auc = glm_roc_curve$auc[1]
glm_results = list(classifier = glm_model, predictions = glm_preds, roc = glm_roc_curve, auc = glm.auc)
glm_results = list(classifier = glm_model, predictions = glm_preds, roc = glm_roc_curve, auc = glm_auc)
glm_results
set.seed(100)
lda_model = train(X, any_damage, method = 'lda', preProcess = c('center','scale') metric = 'ROC', trControl = ctrl)
set.seed(100)
lda_model = train(X, any_damage, method = 'lda', preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
lda_preds = predict(lda_model, X, type = 'prob')
lda_roc_curve = pROC::roc(response = any_damage, predictor = lda_preds[,1])
lda_auc = lda_roc_curve$auc[1]
lda_results = list(classifier = lda_model, predictions = lda_preds, roc = lda_roc_curve, auc = lda_auc)
glm_results
lda_results
set.seed(100)
pls_model = train(X, any_damage, method = 'pls', tuneGrid = expand.grid(.ncomp = 1:10) preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
set.seed(100)
pls_model = train(X, any_damage, method = 'pls', tuneGrid = expand.grid(.ncomp = 1:10), preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
pls_preds = predict(pls_model, X, type = 'prob')
pls_roc_curve = pROC::roc(response = any_damage, predictor = pls_preds[,1])
pls_auc = pls_roc_curve$auc[1]
pls_results = list(classifier = pls_model, predictions = pls_preds, roc = pls_roc_curve, auc = pls_auc)
pls_results
glm_grid = expand.grid(.alpha = c(0, .1, .2, .4, .6, .8, 1),
.lambda = seq(0.01, .2, length = 20))
pls_results$predictions
glm_grid = expand.grid(.alpha = c(0, .1, .2, .4, .6, .8, 1),
.lambda = seq(0.01, .2, length = 20))
set.seed(100)
glm_model = train(X, any_damage, method = 'glmnet',
tuneGrid = glm_grid,
preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
glm_preds = predict(glm_model, X, type = 'prob')
glm_roc_curve = pROC::roc(response = any_damage, predictor = glm_preds[,1])
glm_auc = glm_roc_curve$auc[1]
glm_results = list(classifier = glm_model, predictions = glm_preds, roc = glm_roc_curve, auc = glm_auc)
pls_results
glm_results
nsc_grid = expand.grid(.treshold = 0:25)
nsc_grid = expand.grid(.treshold = 0:25)
set.seed(100)
nsc_model = train(X, any_damage, method = 'pam',
tuneGrid = nsc_grid,
preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
nsc_grid = expand.grid(.threshold = 0:25)
set.seed(100)
nsc_model = train(X, any_damage, method = 'pam',
tuneGrid = nsc_grid,
preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
nsc_preds = predict(nsc_model, X, type = 'prob')
nsc_roc_curve = pROC::roc(response = any_damage, predictor = nsc_preds[,1])
nsc_auc = nsc_roc_curve$auc[1]
nsc_results = list(classifier = nsc_model, predictions = nsc_preds, roc = nsc_roc_curve, auc = nsc_auc)
nsc_results
result = list(glm = glm_results, lda = lda_results, glmnet = glm_results, nsc = nsc_results, pls = pls_results)
result
data.frame(name = 'LR', auc = result$glm$auc)
ctrl = trainControl(summaryFunction = twoClassSummary, classProbs = T)
set.seed(100)
glm_model = train(X, any_damage, method = 'glm', metric = 'ROC', trControl = ctrl)
glm_preds = predict(glm_model, X, type = 'prob')
glm_roc_curve = pROC::roc(response = any_damage, predictor = glm_preds[,1])
glm_auc = glm_roc_curve$auc[1]
glm_results = list(classifier = glm_model, predictions = glm_preds, roc = glm_roc_curve, auc = glm_auc)
glm_results
glm_grid = expand.grid(.alpha = c(0, .1, .2, .4, .6, .8, 1),
.lambda = seq(0.01, .2, length = 20))
set.seed(100)
glmnet_model = train(X, any_damage, method = 'glmnet',
tuneGrid = glm_grid,
preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
glmnet_preds = predict(glmnet_model, X, type = 'prob')
glmnet_roc_curve = pROC::roc(response = any_damage, predictor = glmnet_preds[,1])
glmnet_auc = glmnet_roc_curve$auc[1]
glmnet_results = list(classifier = glmnet_model, predictions = glmnet_preds, roc = glmnet_roc_curve, auc = glmnet_auc)
glmnet_results
rbind(data.frame(name = 'LR', auc = result$glm$auc), data.frame(name = 'LDA', auc = result$lda$auc), data.frame(name = 'PLSDA', auc = result$pls$auc),
result = list(glm = glm_results, lda = lda_results, glmnet = glmnet_results, nsc = nsc_results, pls = pls_results)
data.frame(name = 'GLMNET', auc = result$glm$auc)
data.frame(name = 'LR', auc = result$glm$auc)
data.frame(name = 'LDA', auc = result$lda$auc)
data.frame(name = 'LR', auc = result$glm$auc)
glm_results
lda_results
pls_results
glmnet_results
result = list(glm = glm_results, lda = lda_results, glmnet = glmnet_results, nsc = nsc_results, pls = pls_results)
result$glmnet$auc
result$glm$auc
df = rbind( data.frame(name="LR", auc=all_linear_models$glm$auc), data.frame(name="LDA", auc=all_linear_models$lda$auc),
data.frame(name="PLSDA", auc=all_linear_models$plsda$auc), data.frame(name="GLMNET", auc=all_linear_models$glmnet$auc),
data.frame(name="NSC", auc=all_linear_models$nsc$auc) )
df = rbind( data.frame(name="LR", auc=result$glm$auc), data.frame(name="LDA", auc=result$lda$auc),
data.frame(name="PLSDA", auc=result$plsda$auc), data.frame(name="GLMNET", auc=result$glmnet$auc),
data.frame(name="NSC", auc=result$nsc$auc) )
data.frame(name="LR", auc=result$glm$auc)
data.frame(name="LDA", auc=result$lda$auc)
data.frame(name="PLSDA", auc=result$plsda$auc)
df = rbind( data.frame(name="LR", auc=result$glm$auc), data.frame(name="LDA", auc=result$lda$auc),
data.frame(name="PLSDA", auc=result$pls$auc), data.frame(name="GLMNET", auc=result$glmnet$auc),
data.frame(name="NSC", auc=result$nsc$auc) )
df
varImp(result$glm$classifier)
zv_cols = nearZeroVar(chem)
X = chem[,-zv_cols]
flc = findLinearCombos(X)
flc
X = X[,-flc$remove]
X
ctrl = trainControl(summaryFunction = twoClassSummary, classProbs = T)
set.seed(100)
glm_model = train(X, any_damage, method = 'glm', metric = 'ROC', trControl = ctrl)
glm_preds = predict(glm_model, X, type = 'prob')
glm_roc_curve = pROC::roc(response = any_damage, predictor = glm_preds[,1])
glm_auc = glm_roc_curve$auc[1]
glm_results = list(classifier = glm_model, predictions = glm_preds, roc = glm_roc_curve, auc = glm_auc)
glm_results
set.seed(100)
lda_model = train(X, any_damage, method = 'lda', preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
lda_preds = predict(lda_model, X, type = 'prob')
lda_roc_curve = pROC::roc(response = any_damage, predictor = lda_preds[,1])
lda_auc = lda_roc_curve$auc[1]
lda_results = list(classifier = lda_model, predictions = lda_preds, roc = lda_roc_curve, auc = lda_auc)
lda_results
set.seed(100)
pls_model = train(X, any_damage, method = 'pls', tuneGrid = expand.grid(.ncomp = 1:10), preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
pls_preds = predict(pls_model, X, type = 'prob')
pls_roc_curve = pROC::roc(response = any_damage, predictor = pls_preds[,1])
pls_auc = pls_roc_curve$auc[1]
pls_results = list(classifier = pls_model, predictions = pls_preds, roc = pls_roc_curve, auc = pls_auc)
pls_results
glm_grid = expand.grid(.alpha = c(0, .1, .2, .4, .6, .8, 1),
.lambda = seq(0.01, .2, length = 20))
set.seed(100)
glmnet_model = train(X, any_damage, method = 'glmnet',
tuneGrid = glm_grid,
preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
glmnet_preds = predict(glmnet_model, X, type = 'prob')
glmnet_roc_curve = pROC::roc(response = any_damage, predictor = glmnet_preds[,1])
glmnet_auc = glmnet_roc_curve$auc[1]
glmnet_results = list(classifier = glmnet_model, predictions = glmnet_preds, roc = glmnet_roc_curve, auc = glmnet_auc)
glmnet_results
nsc_grid = expand.grid(.threshold = 0:25)
set.seed(100)
nsc_model = train(X, any_damage, method = 'pam',
tuneGrid = nsc_grid,
preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
nsc_preds = predict(nsc_model, X, type = 'prob')
nsc_roc_curve = pROC::roc(response = any_damage, predictor = nsc_preds[,1])
nsc_auc = nsc_roc_curve$auc[1]
nsc_results = list(classifier = nsc_model, predictions = nsc_preds, roc = nsc_roc_curve, auc = nsc_auc)
nsc_results
result = list(glm = glm_results, lda = lda_results, glmnet = glmnet_results, nsc = nsc_results, pls = pls_results)
df = rbind( data.frame(name="LR", auc=result$glm$auc), data.frame(name="LDA", auc=result$lda$auc),
data.frame(name="PLSDA", auc=result$pls$auc), data.frame(name="GLMNET", auc=result$glmnet$auc),
data.frame(name="NSC", auc=result$nsc$auc) )
df
varImp(result$glm$classifier)
chemical_result = list(glm = glm_results, lda = lda_results, glmnet = glmnet_results, nsc = nsc_results, pls = pls_results)
df = rbind( data.frame(name="LR", auc=chemical_result$glm$auc), data.frame(name="LDA", auc=chemical_result$lda$auc),
data.frame(name="PLSDA", auc=chemical_result$pls$auc), data.frame(name="GLMNET", auc=chemical_result$glmnet$auc),
data.frame(name="NSC", auc=chemical_result$nsc$auc) )
df
varImp(chemical_result$glm$classifier)
#remove near zero var
zv_cols = nearZeroVar(bio)
X = bio[,-zv_cols]
#find linearly dependent columns
findLinearCombos(X)
ctrl = trainControl(summaryFunction = twoClassSummary, classProbs = T)
set.seed(100)
glm_model = train(X, any_damage, method = 'glm', metric = 'ROC', trControl = ctrl)
glm_preds = predict(glm_model, X, type = 'prob')
glm_roc_curve = pROC::roc(response = any_damage, predictor = glm_preds[,1])
glm_auc = glm_roc_curve$auc[1]
glm_results = list(classifier = glm_model, predictions = glm_preds, roc = glm_roc_curve, auc = glm_auc)
glm_results
set.seed(100)
lda_model = train(X, any_damage, method = 'lda', preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
lda_preds = predict(lda_model, X, type = 'prob')
lda_roc_curve = pROC::roc(response = any_damage, predictor = lda_preds[,1])
lda_auc = lda_roc_curve$auc[1]
lda_results = list(classifier = lda_model, predictions = lda_preds, roc = lda_roc_curve, auc = lda_auc)
lda_results
set.seed(100)
lda_model = train(X, any_damage, method = 'lda', preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
lda_preds = predict(lda_model, X, type = 'prob')
lda_roc_curve = pROC::roc(response = any_damage, predictor = lda_preds[,1])
lda_auc = lda_roc_curve$auc[1]
lda_results = list(classifier = lda_model, predictions = lda_preds, roc = lda_roc_curve, auc = lda_auc)
lda_results
set.seed(100)
pls_model = train(X, any_damage, method = 'pls', tuneGrid = expand.grid(.ncomp = 1:10), preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
pls_preds = predict(pls_model, X, type = 'prob')
pls_roc_curve = pROC::roc(response = any_damage, predictor = pls_preds[,1])
pls_auc = pls_roc_curve$auc[1]
pls_results = list(classifier = pls_model, predictions = pls_preds, roc = pls_roc_curve, auc = pls_auc)
pls_results
nsc_grid = expand.grid(.threshold = 0:25)
set.seed(100)
nsc_model = train(X, any_damage, method = 'pam',
tuneGrid = nsc_grid,
preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
nsc_preds = predict(nsc_model, X, type = 'prob')
nsc_roc_curve = pROC::roc(response = any_damage, predictor = nsc_preds[,1])
nsc_auc = nsc_roc_curve$auc[1]
nsc_results = list(classifier = nsc_model, predictions = nsc_preds, roc = nsc_roc_curve, auc = nsc_auc)
nsc_results
glm_grid = expand.grid(.alpha = c(0, .1, .2, .4, .6, .8, 1),
.lambda = seq(0.01, .2, length = 20))
set.seed(100)
glmnet_model = train(X, any_damage, method = 'glmnet',
tuneGrid = glm_grid,
preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
glmnet_preds = predict(glmnet_model, X, type = 'prob')
glmnet_roc_curve = pROC::roc(response = any_damage, predictor = glmnet_preds[,1])
glmnet_auc = glmnet_roc_curve$auc[1]
glmnet_results = list(classifier = glmnet_model, predictions = glmnet_preds, roc = glmnet_roc_curve, auc = glmnet_auc)
glmnet_results
bio_result = list(glm = glm_results, lda = lda_results, glmnet = glmnet_results, nsc = nsc_results, pls = pls_results)
df = rbind( data.frame(name="LR", auc=bio_result$glm$auc), data.frame(name="LDA", auc=bio_result$lda$auc),
data.frame(name="PLSDA", auc=bio_result$pls$auc), data.frame(name="GLMNET", auc=bio_result$glmnet$auc),
data.frame(name="NSC", auc=bio_result$nsc$auc) )
df
plot(bio_result$glm$roc, legacy.axes = T, add = F, col= 'gray')
plot(bio_result$glm$roc, legacy.axes = T, add = F, col= 'gray')
plot(chemical_result$glm$roc, legacy.axes = T, add = T)
plot(bio_result$glm$roc, legacy.axes = T, add = F, col= 'gray')
plot(chemical_result$glm$roc, legacy.axes = T, add = T)
legend( 0.6, 0.2, c("LR (biological)","LR (chemical)"), col=c("gray","black"), lty=c(1,1) )
all_data = cbind(bio, chem)
all_data
zv_cols = nearZeroVar(all_data)
X = all_data[,-zv_cols]
flc= findLinearCombos(X)
flc$remove
X = X[, -flc$remove]
#LM
ctrl = trainControl(summaryFunction = twoClassSummary, classProbs = T)
set.seed(100)
glm_model = train(X, any_damage, method = 'glm', metric = 'ROC', trControl = ctrl)
glm_preds = predict(glm_model, X, type = 'prob')
glm_roc_curve = pROC::roc(response = any_damage, predictor = glm_preds[,1])
glm_auc = glm_roc_curve$auc[1]
glm_results = list(classifier = glm_model, predictions = glm_preds, roc = glm_roc_curve, auc = glm_auc)
#LDA
lda_model = train(X, any_damage, method = 'lda', preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
lda_preds = predict(lda_model, X, type = 'prob')
lda_roc_curve = pROC::roc(response = any_damage, predictor = lda_preds[,1])
lda_auc = lda_roc_curve$auc[1]
lda_results = list(classifier = lda_model, predictions = lda_preds, roc = lda_roc_curve, auc = lda_auc)
#PLS
pls_model = train(X, any_damage, method = 'pls', tuneGrid = expand.grid(.ncomp = 1:10), preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
pls_preds = predict(pls_model, X, type = 'prob')
pls_roc_curve = pROC::roc(response = any_damage, predictor = pls_preds[,1])
pls_auc = pls_roc_curve$auc[1]
pls_results = list(classifier = pls_model, predictions = pls_preds, roc = pls_roc_curve, auc = pls_auc)
#GLMNET
glm_grid = expand.grid(.alpha = c(0, .1, .2, .4, .6, .8, 1),
.lambda = seq(0.01, .2, length = 20))
glmnet_model = train(X, any_damage, method = 'glmnet',
tuneGrid = glm_grid,
preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
glmnet_preds = predict(glmnet_model, X, type = 'prob')
glmnet_roc_curve = pROC::roc(response = any_damage, predictor = glmnet_preds[,1])
glmnet_auc = glmnet_roc_curve$auc[1]
glmnet_results = list(classifier = glmnet_model, predictions = glmnet_preds, roc = glmnet_roc_curve, auc = glmnet_auc)
#NSC
nsc_grid = expand.grid(.threshold = 0:25)
nsc_model = train(X, any_damage, method = 'pam',
tuneGrid = nsc_grid,
preProcess = c('center','scale'), metric = 'ROC', trControl = ctrl)
nsc_preds = predict(nsc_model, X, type = 'prob')
nsc_roc_curve = pROC::roc(response = any_damage, predictor = nsc_preds[,1])
nsc_auc = nsc_roc_curve$auc[1]
nsc_results = list(classifier = nsc_model, predictions = nsc_preds, roc = nsc_roc_curve, auc = nsc_auc)
nsc_results
all_results  = list(glm = glm_results, lda = lda_results, glmnet = glmnet_results, nsc = nsc_results, pls = pls_results)
df = rbind( data.frame(name="LR", auc=all_results$glm$auc), data.frame(name="LDA", auc=all_results$lda$auc),
data.frame(name="PLSDA", auc=all_results$pls$auc), data.frame(name="GLMNET", auc=all_results$glmnet$auc),
data.frame(name="NSC", auc=all_results$nsc$auc) )
df
glm_results
varImp(all_results$glm$classifier)
cbind(varImp(all_results$glm$classifier), varImp(chemical_result$glm$classifier), varImp(bio_result$glm$classifier))
unlist(cbind(varImp(all_results$glm$classifier), varImp(chemical_result$glm$classifier), varImp(bio_result$glm$classifier)))
varImp(all_results$glm$classifier)
(rbind(varImp(all_results$glm$classifier), varImp(chemical_result$glm$classifier), varImp(bio_result$glm$classifier)))
varImp(chemical_result$glm$classifier)
varImp(all_results$glm$classifier)[2]
varImp(all_results$glm$classifier)[1]
(rbind(varImp(all_results$glm$classifier)[1], varImp(chemical_result$glm$classifier)[1], varImp(bio_result$glm$classifier)[1]))
(rbind(varImp(all_results$glm$classifier)[[1]], varImp(chemical_result$glm$classifier)[[1]], varImp(bio_result$glm$classifier)[[1]]))
(cbind(varImp(all_results$glm$classifier)[[1]], varImp(chemical_result$glm$classifier)[[1]], varImp(bio_result$glm$classifier)[[1]]))
(cbind(varImp(all_results$glm$classifier)[1], varImp(chemical_result$glm$classifier)[1], varImp(bio_result$glm$classifier)[1]))
varImp(chemical_result$glm$classifier)[1]
varImp(all_results$glm$classifier)
varImp(chemical_result$glm$classifier)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(AppliedPredictiveModeling)
library(pROC)
data(oil)
table(oilType)
zv_cols = nearZeroVar(fattyAcids)
zv_cols
findLinearCombos(fattyAcids)
fattyAcids
set.seed(100)
lda_model = train(fattyAcids, oilType, method = 'lda', preProcess = c('center','scale'))
lda_model
set.seed(100)
lda_model = train(fattyAcids, oilType, method = 'lda', preProcess = c('center','scale'))
y_hat = predict(lda_model, fattyAcids)
y_hat
cm = confusionMatrix(data = y_hat, reference = oilType)
cm
lda = list(classifier = lda_model, confusion_matrix = cm)
lda
glmnet_grid = expand.grid(.alpha = c(0, .1 , .2, .4, .6, .8 , 1),
.lambda=  seq(.01, .2, length = 20))
glmnet_grid = expand.grid(.alpha = c(0, .1 , .2, .4, .6, .8 , 1),
.lambda=  seq(.01, .2, length = 20))
set.seed(100)
glmnet_model = train(fattyAcids, oilType, method = 'glmnet', tuneGrid = glmnet_grid,  preProcess = c('center','scale'))
y_hat = predict(glmnet_model, fattyAcids)
cm = confusionMatrix(data = y_hat, reference = oilType)
glm = list(classifier = glmnet_model, confusion_matrix = cm)
lda
glm
glm = list(classifier = glmnet_model, confusion_matrix = cm)
nsc_grid = expand.grid(.threshold=0:25)
set.seed(100)
nsc_model = train(fattyAcids, oilType, method = 'pam', tuneGrid = nsc_grid,  preProcess = c('center','scale'))
y_hat = predict(nsc_model, fattyAcids)
cm = confusionMatrix(data = y_hat, reference = oilType)
glm = list(classifier = glmnet_model, confusion_matrix = cm)
glmnet_grid = expand.grid(.alpha = c(0, .1 , .2, .4, .6, .8 , 1),
.lambda=  seq(.01, .2, length = 20))
set.seed(100)
glmnet_model = train(fattyAcids, oilType, method = 'glmnet', tuneGrid = glmnet_grid,  preProcess = c('center','scale'))
y_hat = predict(glmnet_model, fattyAcids)
cm = confusionMatrix(data = y_hat, reference = oilType)
glm = list(classifier = glmnet_model, confusion_matrix = cm)
glm = list(classifier = glmnet_model, confusion_matrix = cm)
nsc_grid = expand.grid(.threshold=0:25)
set.seed(100)
nsc_model = train(fattyAcids, oilType, method = 'pam', tuneGrid = nsc_grid,  preProcess = c('center','scale'))
y_hat = predict(nsc_model, fattyAcids)
cm = confusionMatrix(data = y_hat, reference = oilType)
nsc = list(classifier = glmnet_model, confusion_matrix = cm)
results = list(lda = lda, glm = glm, nsc = nsc)
results$lda$confusion_matrix$overall[1]
rbind(data.frame(name = 'LDA', Accuracy = results$lda$confusion_matrix$overall[1]),
data.frame(name = 'GLMNET', Accuracy = results$glm$confusion_matrix$overall[1]),
data.frame(name = 'NSC', Accuracy = results$nsc$confusion_matrix$overall[1]))
df = rbind(data.frame(name = 'LDA', Accuracy = results$lda$confusion_matrix$overall[1]),
data.frame(name = 'GLMNET', Accuracy = results$glm$confusion_matrix$overall[1]),
data.frame(name = 'NSC', Accuracy = results$nsc$confusion_matrix$overall[1]))
df
